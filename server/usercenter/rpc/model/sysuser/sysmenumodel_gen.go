// Code generated by goctl. DO NOT EDIT!

package sysuser

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysMenuFieldNames          = builder.RawFieldNames(&SysMenu{})
	sysMenuRows                = strings.Join(sysMenuFieldNames, ",")
	sysMenuRowsExpectAutoSet   = strings.Join(stringx.Remove(sysMenuFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	sysMenuRowsWithPlaceHolder = strings.Join(stringx.Remove(sysMenuFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheUsercenterSysMenuIdPrefix = "cache:usercenter:sysMenu:id:"
)

type (
	sysMenuModel interface {
		Insert(ctx context.Context, data *SysMenu) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*SysMenu, error)
		Update(ctx context.Context, data *SysMenu) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultSysMenuModel struct {
		sqlc.CachedConn
		table string
	}

	SysMenu struct {
		Id        uint64       `db:"id"`
		ParentId  uint64       `db:"parent_id"` // 父菜单ID
		Name      string       `db:"name"`      // 路由name
		Path      string       `db:"path"`      // 路由path
		Component string       `db:"component"` // 对应前端文件路径
		Title     string       `db:"title"`     // 附加属性
		Icon      string       `db:"icon"`      // 附加属性
		Hidden    int64        `db:"hidden"`    // 是否隐藏 0 false/1 true
		CreateAt  time.Time    `db:"create_at"`
		UpdateAt  time.Time    `db:"update_at"`
		DeleteAt  sql.NullTime `db:"delete_at"`
	}
)

func newSysMenuModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSysMenuModel {
	return &defaultSysMenuModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`sys_menu`",
	}
}

func (m *defaultSysMenuModel) Delete(ctx context.Context, id uint64) error {
	usercenterSysMenuIdKey := fmt.Sprintf("%s%v", cacheUsercenterSysMenuIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, usercenterSysMenuIdKey)
	return err
}

func (m *defaultSysMenuModel) FindOne(ctx context.Context, id uint64) (*SysMenu, error) {
	usercenterSysMenuIdKey := fmt.Sprintf("%s%v", cacheUsercenterSysMenuIdPrefix, id)
	var resp SysMenu
	err := m.QueryRowCtx(ctx, &resp, usercenterSysMenuIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysMenuRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysMenuModel) Insert(ctx context.Context, data *SysMenu) (sql.Result, error) {
	usercenterSysMenuIdKey := fmt.Sprintf("%s%v", cacheUsercenterSysMenuIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysMenuRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ParentId, data.Name, data.Path, data.Component, data.Title, data.Icon, data.Hidden, data.DeleteAt)
	}, usercenterSysMenuIdKey)
	return ret, err
}

func (m *defaultSysMenuModel) Update(ctx context.Context, data *SysMenu) error {
	usercenterSysMenuIdKey := fmt.Sprintf("%s%v", cacheUsercenterSysMenuIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysMenuRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ParentId, data.Name, data.Path, data.Component, data.Title, data.Icon, data.Hidden, data.DeleteAt, data.Id)
	}, usercenterSysMenuIdKey)
	return err
}

func (m *defaultSysMenuModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUsercenterSysMenuIdPrefix, primary)
}

func (m *defaultSysMenuModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysMenuRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysMenuModel) tableName() string {
	return m.table
}
