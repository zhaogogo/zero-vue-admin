// Code generated by goctl. DO NOT EDIT!

package systemusermodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	systemUserFieldNames          = builder.RawFieldNames(&SystemUser{})
	systemUserRows                = strings.Join(systemUserFieldNames, ",")
	systemUserRowsExpectAutoSet   = strings.Join(stringx.Remove(systemUserFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	systemUserRowsWithPlaceHolder = strings.Join(stringx.Remove(systemUserFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	systemUserModel interface {
		Insert(ctx context.Context, data *SystemUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SystemUser, error)
		FindOneByName(ctx context.Context, name string) (*SystemUser, error)
		Update(ctx context.Context, data *SystemUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSystemUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SystemUser struct {
		Id         int64     `db:"id"`          // 编号
		Name       string    `db:"name"`        // 用户名
		NickName   string    `db:"nick_name"`   // 昵称
		Avatar     string    `db:"avatar"`      // 头像
		Password   string    `db:"password"`    // 密码
		Email      string    `db:"email"`       // 邮箱
		Mobile     string    `db:"mobile"`      // 手机号
		Status     uint64    `db:"status"`      // 状态  0：禁用   1：正常
		CreateBy   string    `db:"create_by"`   // 创建人
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateBy   string    `db:"update_by"`   // 更新人
		UpdateTime time.Time `db:"update_time"` // 更新时间
		DelFlag    int64     `db:"del_flag"`    // 是否删除  0：已删除  1：正常
	}
)

func newSystemUserModel(conn sqlx.SqlConn) *defaultSystemUserModel {
	return &defaultSystemUserModel{
		conn:  conn,
		table: "`system_user`",
	}
}

func (m *defaultSystemUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSystemUserModel) FindOne(ctx context.Context, id int64) (*SystemUser, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", systemUserRows, m.table)
	var resp SystemUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemUserModel) FindOneByName(ctx context.Context, name string) (*SystemUser, error) {
	var resp SystemUser
	query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", systemUserRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSystemUserModel) Insert(ctx context.Context, data *SystemUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, systemUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.NickName, data.Avatar, data.Password, data.Email, data.Mobile, data.Status, data.CreateBy, data.UpdateBy, data.DelFlag)
	return ret, err
}

func (m *defaultSystemUserModel) Update(ctx context.Context, newData *SystemUser) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, systemUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Name, newData.NickName, newData.Avatar, newData.Password, newData.Email, newData.Mobile, newData.Status, newData.CreateBy, newData.UpdateBy, newData.DelFlag, newData.Id)
	return err
}

func (m *defaultSystemUserModel) tableName() string {
	return m.table
}
