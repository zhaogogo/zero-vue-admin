syntax = "v1"

info(
    title: "监控主机"
    desc: "监控告主机管理"
    author: "qiang.zhao"
    email: "zhaoq0201@163.com"
    version: "v1"
)

import "common.api"

@server(
    jwt: Auth
    middleware: ParseJWTToken,CheckUserExists,Casbin
    group: monitoring/hosts
    prefix: /api/v1/monitoring/hosts
)
service ApiGateway-api {
    @doc "分页获取hosts"
    @handler Paging
    post /paging (HostPagingRequest) returns (HostResponse)

    @doc "创建host"
    @handler Create
    post / (Host) returns (HttpCommonResponse)

    @doc "创建host"
    @handler Update
    put / (Host) returns (HttpCommonResponse)

    @doc "获取全部主机静默规则"
    @handler GetAllSlienceJson
    get /slience/all () returns (SlienceJsonResponse)

    @doc "获取host静默规则"
    @handler GetSlience
    post /slience/:host (SlienceGetRequest) returns (SlienceGetResponse)

    @doc "创建或更新host静默规则"
    @handler CreateUpdateSlience
    put /slience/:host (SliencePutRequest) returns (HttpCommonResponse)

    @doc "静默hostSlience"
    @handler HandlerHostsSlience
    post /slience (HandlerHostsSlienceRequest) returns (HttpCommonResponse)
}

type Host struct {
    Id         uint64 `json:"id,optional"                gorm:"clumn:id;primarykey"                              validate:"required,numeric,gte=1""`
    Host       string `json:"host,optional"              gorm:"clumn:host;type:varchar(50);not null;default:''"  validate:"required"`
    To         int    `json:"to,optional"                gorm:"clumn:to;type:tinyint;not null"                   validate:"required,numeric,oneof=1 2"`
    CreatedAt  uint64 `json:"createdAt,optional"         gorm:"clumn:create_at;autoCreateTime;not null"`
    ModifiedAt  uint64 `json:"modifiedAt,optional"         gorm:"clumn:modifie_at;autoUpdateTime;not null"`
    DeletedAt  uint64 `json:"deletedAt,optional"         gorm:"clumn:delete_at;index"`

    Tags   []HostTag        `json:"tags,optional"        gorm:"foreignKey:host_id" validate:"dive"`
    SlienceNames []SlienceName `json:"sliences,optional" gorm:"foreigKey:host_id"`
}

type HostTag struct {
    Id          uint64 `json:"id,optional" gorm:"clumn:id;primaryKey;type:bigint AUTO_INCREMENT"`
    HostId      uint64 `json:"hostId,optional" gorm:"clumn:host_id"`
    Key         string `json:"key,optional" gorm:"clumn:key;type:varchar(50);default:'';not null" validate:"required"`
    Value       string `json:"value,optional" gorm:"clumn:value;type:varchar(50);default:'';not null" validate:"required"`
}

type SlienceJoinRest struct {
    Id          uint64 `json:"id" gorm:"clumn:id;primaryKey;type:bigint AUTO_INCREMENT"`
    Host        string `json:"host" gorm:"clumn:host"`
    SlienceName string `json:"slience_name" gorm:"clumn:slience_name"`
    To 			int    `json:"to" gorm:"to"`
    Name        string `json:"name" gorm:"clumn:name"`
    Value       string `json:"value" gorm:"clumn:value"`
    IsRegex     bool   `json:"isRegex" gorm:"clumn:is_regex"`
    IsEqual     bool   `json:"isEqual" gorm:"clumn:is_equal"`
    Default     bool   `json:"default" gorm:"clumn:default"`
}

type SlienceName struct {
    Id            uint64 `json:"id,optional" gorm:"clumn:id;primaryKey"`
    HostID        uint64 `json:"host_id" gorm:"clumn:host_id;type:bigint"`
    SlienceName   string `json:"slience_name" gorm:"clumn:slience_name"`
    Default       bool   `json:"default" gorm:"clumn:default"`
    To 			int    `json:"to" gorm:"to"`

    Matchers    []SlienceMatcher `json:"matchers" gorm:"foreignKey:slience_name_id"`
}


type SlienceMatcher struct {
    Id            uint64 `json:"id,optional" gorm:"clumn:id;primaryKey"`
    HostID        uint64 `json:"host_id" gorm:"clumn:host_id;type:bigint"`
    SlienceNameID uint64 `json:"slience_name_id" gorm:"clumn:slience_name_id"`
    Name          string `json:"name" gorm:"clumn:name"`
    Value         string `json:"value" gorm:"clumn:value"`
    isRegex       bool `json:"is_regex" gorm:"clumn:is_regex"`
    isEqual       bool `json:"is_equal" gorm:"clumn:is_equal"`
}

type Matchers struct {
    Name    string `json:"name"`
    Value   string `json:"value"`
    IsRegex bool   `json:"isRegex"`
    IsEqual bool   `json:"isEqual"`
}


type SliencePutRequest struct {
    Host string `path:"host,optional" validate:"required,ipv4"`
    ID uint64 `json:"id,optional" validate:"required,numeric,gte=1"`
    Sliences []SlienceName `json:"sliences"`
}

type SlienceGetRequest struct {
    Host string `path:"host,optional" validate:"required,ipv4"`
}

type SlienceGetResponse struct {
    HttpCommonResponse
    HostSliences HostSliences `json:"hostSliences"`
}

type SlienceJsonResponse struct {
    HttpCommonResponse
    Data interface{} `json:"data"`
}

type HostSliences struct {
    ID uint64 `json:"id"`
    Host string `json:"host"`
    Sliences []SlienceName `json:"sliences"`
}

type (
    HostPagingRequest struct {
        PagingCommonRequest
    }

    HostResponse struct {
        HttpCommonResponse
        PagingCommonResponse
        List []Host `json:"list"`
    }
)

type HandlerHostsSlienceRequest struct {
    Hosts []string `json:"hosts,optional" validate:"required,slice_c='gt=0'"`
    Duration string `json:"duration,optional"`
    OpType string `json:"op_type,optional" validate:"required,oneof='active' 'expired'"`
}
