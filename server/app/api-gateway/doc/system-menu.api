syntax = "v1"

info(
    title: "系统菜单"
    desc: "系统菜单"
    author: "qiang.zhao"
    email: "zhaoq0201@163.com"
    version: "v1"
)

import "common.api"

@server(
    jwt: Auth
    middleware: ParseJWTToken,CheckUserExists,Casbin
    group: system/menu
    prefix: /api/v1/system/menu
)
service ApiGateway-api {
    @doc "获取用户动态路由"
    @handler UserMenus
    get /usermenus returns (UserMenuResponse)
}
@server(
    jwt: Auth
    middleware: ParseJWTToken,CheckUserExists,Casbin
    group: system/menu
    prefix: /api/v1/system/menu
)
service ApiGateway-api {
    @doc "获取全部菜单"
    @handler All
    get /all returns (MenuAllResponse)

    @doc "获取菜单详情"
    @handler Detail
    get /:id (MenuDetailRequest) returns (MenuDetailResponse)

    @doc "新增菜单"
    @handler Create
    post /create (MenuCreateRequest) returns (HttpCommonResponse)

    @doc "删除菜单"
    @handler Delete
    delete /:id (MenuDeleteRequest) returns (HttpCommonResponse)

    @doc "更新菜单"
    @handler Update
    put /:id (MenuUpdateRequest) returns (HttpCommonResponse)

    @doc "更新菜单用户参数"
    @handler UpdateUserParam
    put /:id/userparam (MenuUserParamRequest) returns (HttpCommonResponse)
}
//----------------------------------------------
// 用户动态路由菜单
//----------------------------------------------
type (
    UserMenuResponse struct {
        HttpCommonResponse
        Menus []Menu `json:"menus"`
    }
    MenuAllResponse struct {
        HttpCommonResponse
        Total int64 `json:"total"`
        List []Menu `json:"list"`
    }
)

//----------------------------------------------
// 用户菜单模型
//----------------------------------------------
type (
    Menu struct {
        ID uint64 `json:"id"`
        ParentId uint64 `json:"parentId"`
        Name string `json:"name"`
        Path string `json:"path"`
        Component string `json:"component"`
        Sort int64 `json:"sort"`
        Hidden bool `json:"hidden"`
        MenuMeta MenuMeta `json:"meta"`
        Children []Menu `json:"children,omitempty"`
        Parameters []Parameter `json:"parameters"`
    }
    Parameter struct {
        ID uint64 `json:"id"`
        UserID uint64 `json:"user_id"`
        MenuID uint64 `json:"menu_id"`
        Type string `json:"type"`
        Key string `json:"key"`
        Value string `json:"value"`
    }
    MenuMeta struct {
        Title string `json:"title"`
        Icon string `json:"icon"`
    }
)
//----------------------------------------------
// 获取菜单详情
//----------------------------------------------
type (
    MenuDetailRequest {
        ID uint64 `path:"id,optional" validate:"required,numeric,gte=1"`
    }
    MenuDetailResponse{
        HttpCommonResponse
        Detail Menu `json:"detail"`
    }
)

//----------------------------------------------
// 新增菜单
//----------------------------------------------
type (
    MenuCreateRequest struct {
        ParentID uint64 `json:"parentId,optional" validate:"numeric,gte=0"`
        Name string `json:"name,optional" validate:"required"`
        Path string `json:"path,optional" validate:"required"`
        Component string `json:"component,optional" validate:"required"`
        Meta MetaRequest `json:"meta"`
        Sort int64 `json:"sort,optional"`
        Hidden bool `json:"hidden,optional"`
    }
    MetaRequest struct {
        Title string `json:"title,optional" validate:"required"`
        Icon string `json:"icon,optional"`
    }
)

//----------------------------------------------
// 删除菜单
//----------------------------------------------
type MenuDeleteRequest struct {
    ID uint64 `path:"id,optional" validate:"required,numeric,gte=1"`
}

//----------------------------------------------
// 修改菜单
//----------------------------------------------
type MenuUpdateRequest struct {
    ID uint64 `path:"id,optional" validate:"required,numeric,gte=1"`
    ParentID uint64 `json:"parentId,optional" validate:"numeric,gte=0"`
    Name string `json:"name,optional" validate:"required"`
    Path string `json:"path,optional" validate:"required"`
    Hidden bool `json:"hidden,optional"`
    Component string `json:"component,optional" validate:"required"`
    Meta MetaRequest `json:"meta,optional"`
    Sort int64 `json:"sort,optional" validate:"numeric,gte=0"`
}

type (
    MenuUserParamRequest struct {
        ID uint64 `path:"id,optional" validate:"required,numeric,gte=1"`
        Parameters []ParameterRequest `json:"parameters" validate:"slice_c='gte=0',dive" commen:"slice长度必须大于等于0"` //不写
    }
    ParameterRequest struct {
        ID uint64 `json:"id,optional"`
        UserID uint64 `json:"user_id,optional" validate:"numeric,gte=1"`
        Type string `json:"type,optional" validate:"oneof='query' 'params'"`
        Key string `json:"key,optional" validate:"required"`
        Value string `json:"value,optional" validate:"required"`
    }
)