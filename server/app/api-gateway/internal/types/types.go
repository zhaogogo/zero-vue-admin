// Code generated by goctl. DO NOT EDIT.
package types

type User struct {
	ID         uint64   `json:"id"`
	Name       string   `json:"name"`
	NickName   string   `json:"nick_name"`
	PassWord   string   `json:"password"`
	UserType   int64    `json:"type"`
	Email      string   `json:"email"`
	Phone      string   `json:"phone"`
	Department string   `json:"department"`
	Position   string   `json:"position"`
	CreateBy   string   `json:"createBy"`
	CreateTime int64    `json:"create_time"`
	UpdateBy   string   `json:"updateBy"`
	UpdateTime int64    `json:"update_time"`
	DeleteBy   string   `json:"deleteBy"`
	DeleteTime int64    `json:"delete_time"`
	State      string   `json:"state"`    // todelete:用户已删除  resume:用户未删除
	RoleList   []uint64 `json:"roleList"` // 用户角色
}

type UserPageSet struct {
	Name            string `json:"name"`
	NickName        string `json:"nick_name"`
	Avatar          string `json:"avatar"`
	DefaultRouter   string `json:"defaultRouter"`
	SideMode        string `json:"sideMode"`
	ActiveTextColor string `json:"activeTextColor"`
	TextColor       string `json:"textColor"`
}

type LoginRequest struct {
	UserName string `json:"userName,optional" validate:"required" comment:"用户名"`
	PassWord string `json:"passWord,optional" validate:"required" comment:"密码"`
}

type LoginResponse struct {
	HttpCommonResponse
	Token        string      `json:"token"`
	ExpireAt     int64       `json:"expireAt"`
	RefreshAfter int64       `json:"refreshAfter"`
	Name         string      `json:"name"`
	Roles        []Role      `json:"roles"`
	CurrentRole  Role        `json:"currentRole"`
	UserPageSet  UserPageSet `json:"userPageSet"`
}

type CurrentUserSetResponse struct {
	HttpCommonResponse
	User        User        `json:"user"`
	UserPageSet UserPageSet `json:"userPageSet"`
	Roles       []Role      `json:"roles"`
	CurrentRole Role        `json:"currentRole"`
}

type UserPagingRequest struct {
	PagingCommonRequest
	NameX string `json:"nameX,optional"`
}

type UserPagingResponse struct {
	HttpCommonResponse
	PagingCommonResponse
	List []User `json:"list"`
}

type UserAllResponse struct {
	HttpCommonResponse
	Total int64  `json:"total"`
	List  []User `json:"list"`
}

type UserDetailRequest struct {
	ID uint64 `path:"id,optional" validate:"required,numeric,gte=1"`
}

type UserDetailResponse struct {
	HttpCommonResponse
	Detail User `json:"detail"`
}

type UpdatePasswordRequest struct {
	ID       uint64 `path:"id,optional" validate:"required,numeric,gte=1"`
	Password string `json:"password,optional" validate:"required"`
}

type UpdateLoginPasswordRequest struct {
	Password string `json:"password,optional" validate:"required"`
}

type UpdateUserRoleRequest struct {
	ID       uint64   `path:"id,optional" validate:"required"`
	RoleList []uint64 `json:"roleList,optional"`
}

type UserDeleteSoftRequest struct {
	ID    uint64 `path:"id,optional" validate:"required,numeric,gte=2" comment="用户ID为必填项"`
	State string `json:"state,optional" validate:"required,oneof='deleted' 'resume'"`
}

type UserDeleteRequest struct {
	ID uint64 `path:"id,optional" validate:"required,numeric,gte=2"`
}

type UserCreateRequest struct {
	Name       string   `json:"name,optional" validate:"required,gte=5"`
	NickName   string   `json:"nick_name,optional" validate:"required,gte=5"`
	PassWord   string   `json:"password,optional" validate:"required,gte=5"`
	UserType   int64    `json:"type,optional"`
	Email      string   `json:"email,optional" validate:"required,email"`
	Phone      int64    `json:"phone,optional" validate:"required,numeric,gte=10000000000,lte=19999999999"`
	Department string   `json:"department,optional"`
	Position   string   `json:"position,optional"`
	CreateBy   string   `json:"createBy,optional"`
	CreateTime int64    `json:"create_time,optional"`
	UpdateBy   string   `json:"updateBy,optional"`
	UpdateTime int64    `json:"update_time,optional"`
	DeleteBy   string   `json:"deleteBy,optional"`
	DeleteTime int64    `json:"delete_time,optional"`
	State      string   `json:"state,optional"`    // todelete:用户已删除  resume:用户未删除
	RoleList   []uint64 `json:"roleList,optional"` // 用户角色
}

type UserUpdateRequest struct {
	ID         uint64 `path:"id,optional" validate:"required,numeric,gt=0"`
	Name       string `json:"name,optional" validate:"required,gte=5"`
	NickName   string `json:"nick_name,optional" validate:"required,gte=5"`
	Email      string `json:"email,optional" validate:"required,email"`
	Phone      int64  `json:"phone,optional" validate:"required,numeric,gte=10000000000,lte=19999999999"`
	Department string `json:"department,optional"`
	Position   string `json:"position,optional"`
	UpdateBy   string `json:"updateBy,optional"`
}

type UserPageRequest struct {
	Avatar          string `json:"avatar,default=,optional"`
	DefaultRouter   string `json:"defaultRouter,default=dashboard,optional" validate:"required"`
	SideMode        string `json:"sideMode,default=#191a23,optional" validate:"required"`
	ActiveTextColor string `json:"activeTextColor,default=#1890ff,optional" validate:"required"`
	TextColor       string `json:"textColor,default=#fff,optional" validate:"required"`
}

type UserChangeRoleRequest struct {
	RoleID uint64 `json:"role_id,optional" validate:"numeric,gte=0"`
}

type HttpCommonResponse struct {
	Code int         `json:"code"`
	Msg  string      `json:"msg"`
	Meta interface{} `json:"meta"`
}

type PagingCommonRequest struct {
	Page     int64 `json:"page,optional" validate:"required,numeric,gte=0,lte=999" comment:"page为必须值"`
	PageSize int64 `json:"pageSize,optional" validate:"required,numeric,gte=0,lte=100" comment:"pageSize为必须值"`
}

type PagingCommonResponse struct {
	Page     int64 `json:"page"`
	PageSize int64 `json:"pageSize"`
	Total    int64 `json:"total"`
}

type Role struct {
	ID         uint64 `json:"id"`
	Role       string `json:"role"`
	Name       string `json:"name"`
	CreateBy   string `json:"createBy"`
	CreateTime int64  `json:"create_time"`
	UpdateBy   string `json:"updateBy"`
	UpdateTime int64  `json:"update_time"`
	DeleteBy   string `json:"deleteBy"`
	DeleteTime int64  `json:"delete_time"`
	State      string `json:"state,optional"` // todelete:用户已删除  resume:用户未删除
}

type RoleDetailRequest struct {
	ID uint64 `path:"id,optional" validate:"required,numeric,gte=1"`
}

type RoleDetailResponse struct {
	HttpCommonResponse
	Detail Role `json:"detail"`
}

type RoleDeleteRequest struct {
	ID uint64 `path:"id,optional" validate:"required,numeric,gte=2" comment="用户ID为必填项"`
}

type RoleDeleteSoftRequest struct {
	ID    uint64 `path:"id,optional" validate:"required,numeric,gte=2" comment="用户ID为必填项"`
	State string `json:"state,optional" validate:"required,oneof='deleted' 'resume'"`
}

type RoleUpdateRequest struct {
	ID       uint64 `path:"id,optional" validate:"required,numeric,gte=1"`
	Role     string `json:"role,optional" validate:"required"`
	Name     string `json:"name,optional" validate:"required"`
	CreateBy string `json:"createBy,optional" validate:"required"`
	UpdateBy string `json:"updateBy,optional" validate:"required"`
	DeleteBy string `json:"deleteBy,optional"`
}

type RoleCreateRequest struct {
	Role string `json:"role,optional" validate:"required"`
	Name string `json:"name,optional" validate:"required"`
}

type RoleAllResponse struct {
	HttpCommonResponse
	Total int    `json:"total"`
	List  []Role `json:"list"`
}

type RoleMenuPermissionRequest struct {
	ID uint64 `path:"id,optional" validate:"numeric,gte=1"`
}

type RoleMenuPermissionResponse struct {
	HttpCommonResponse
	List []MenuResp `json:"list"`
}

type MenuResp struct {
	ID        uint64   `json:"id"`
	ParentId  uint64   `json:"parentId"`
	Name      string   `json:"name"`
	Path      string   `json:"path"`
	Component string   `json:"component"`
	Sort      int64    `json:"sort"`
	Hidden    bool     `json:"hidden"`
	MenuMeta  MenuMeta `json:"meta"`
}

type RoleAPIPermissionRequest struct {
	ID uint64 `path:"id,optional" validate:"required,numeric"`
}

type RoleAPIPermissionResponse struct {
	HttpCommonResponse
	Policy []CasbinPolicy `json:"policy"`
}

type CasbinPolicy struct {
	API    string `json:"api"`
	Method string `json:"method"`
}

type UpdateRoleMenuPermissionRequest struct {
	ID         uint64   `path:"id,optional" validate:"numeric,gte=1"`
	MenuIDList []uint64 `json:"menuIdList,optional"`
}

type UpdateRoleAPIPermissionRequest struct {
	ID          uint64       `path:"id,optional" validate:"required,numeric"`
	CasbinRules []CasbinRule `json:"casbinRules" validate:"dive"`
}

type CasbinRule struct {
	Api    string `json:"api" validate:"required"`
	Method string `json:"method" validate:"required,oneof='GET' 'PUT' 'DELETE' 'POST'"`
}

type UserMenuResponse struct {
	HttpCommonResponse
	Menus []Menu `json:"menus"`
}

type MenuAllResponse struct {
	HttpCommonResponse
	Total int64  `json:"total"`
	List  []Menu `json:"list"`
}

type Menu struct {
	ID         uint64      `json:"id"`
	ParentId   uint64      `json:"parentId"`
	Name       string      `json:"name"`
	Path       string      `json:"path"`
	Component  string      `json:"component"`
	Sort       int64       `json:"sort"`
	Hidden     bool        `json:"hidden"`
	MenuMeta   MenuMeta    `json:"meta"`
	Children   []Menu      `json:"children,omitempty"`
	Parameters []Parameter `json:"parameters"`
}

type Parameter struct {
	ID     uint64 `json:"id"`
	UserID uint64 `json:"user_id"`
	MenuID uint64 `json:"menu_id"`
	Type   string `json:"type"`
	Key    string `json:"key"`
	Value  string `json:"value"`
}

type MenuMeta struct {
	Title string `json:"title"`
	Icon  string `json:"icon"`
}

type MenuDetailRequest struct {
	ID uint64 `path:"id,optional" validate:"required,numeric,gte=1"`
}

type MenuDetailResponse struct {
	HttpCommonResponse
	Detail Menu `json:"detail"`
}

type MenuCreateRequest struct {
	ParentID  uint64      `json:"parentId,optional" validate:"numeric,gte=0"`
	Name      string      `json:"name,optional" validate:"required"`
	Path      string      `json:"path,optional" validate:"required"`
	Component string      `json:"component,optional" validate:"required"`
	Meta      MetaRequest `json:"meta"`
	Sort      int64       `json:"sort,optional"`
	Hidden    bool        `json:"hidden,optional"`
}

type MetaRequest struct {
	Title string `json:"title,optional" validate:"required"`
	Icon  string `json:"icon,optional"`
}

type MenuDeleteRequest struct {
	ID uint64 `path:"id,optional" validate:"required,numeric,gte=1"`
}

type MenuUpdateRequest struct {
	ID        uint64      `path:"id,optional" validate:"required,numeric,gte=1"`
	ParentID  uint64      `json:"parentId,optional" validate:"numeric,gte=0"`
	Name      string      `json:"name,optional" validate:"required"`
	Path      string      `json:"path,optional" validate:"required"`
	Hidden    bool        `json:"hidden,optional"`
	Component string      `json:"component,optional" validate:"required"`
	Meta      MetaRequest `json:"meta,optional"`
	Sort      int64       `json:"sort,optional" validate:"numeric,gte=0"`
}

type MenuUserParamRequest struct {
	ID         uint64             `path:"id,optional" validate:"required,numeric,gte=1"`
	Parameters []ParameterRequest `json:"parameters" validate:"slice_c='gte=0',dive" commen:"slice长度必须大于等于0"` //不写
}

type ParameterRequest struct {
	ID     uint64 `json:"id,optional"`
	UserID uint64 `json:"user_id,optional" validate:"numeric,gte=1"`
	Type   string `json:"type,optional" validate:"oneof='query' 'params'"`
	Key    string `json:"key,optional" validate:"required"`
	Value  string `json:"value,optional" validate:"required"`
}

type API struct {
	ID       uint64 `json:"id"`
	API      string `json:"api"`
	Group    string `json:"group"`
	Describe string `json:"describe"`
	Method   string `json:"method"`
}

type APIDetailRequest struct {
	ID uint64 `path:"id,optional" validate:"required,numeric,gte=1"`
}

type APIDetailResponse struct {
	HttpCommonResponse
	Detail API `json:"detail"`
}

type APIUpdateRequest struct {
	ID       uint64 `path:"id,optional" validate:"required,numeric,gte=1"`
	Api      string `json:"api,optional" validate:"required"`
	Describe string `json:"describe,optional" validate:"required"`
	Group    string `json:"group,optional" validate:"required"`
	Method   string `json:"method,optional" validate:"required,oneof='GET' 'PUT' 'DELETE' 'POST'"`
}

type APICreateRequest struct {
	Api      string `json:"api,optional" validate:"required"`
	Describe string `json:"describe,optional" validate:"required"`
	Group    string `json:"group,optional" validate:"required"`
	Method   string `json:"method,optional" validate:"required,oneof='GET' 'PUT' 'DELETE' 'POST'"`
}

type APIDeleteRequest struct {
	ID     uint64 `path:"id,optional" validate:"required,numeric,gte=1"`
	Api    string `json:"api,optional" validate:"required"`
	Method string `json:"method,optional" validate:"required,oneof='GET' 'PUT' 'DELETE' 'POST'"`
}

type APIDeleteMultipleRequest struct {
	APIs []APIDeleteMultipRequest `json:"apis,optional" validate:"slice_c='gte=0',dive" commen:"slice长度必须大于等于0"`
}

type APIDeleteMultipRequest struct {
	ID     uint64 `json:"id,optional" validate:"required,numeric,gte=1"`
	Api    string `json:"api,optional" validate:"required"`
	Method string `json:"method,optional" validate:"required,oneof='GET' 'PUT' 'DELETE' 'POST'"`
}

type APIPagingRequest struct {
	PagingCommonRequest
	OrderKey string `json:"orderKey,optional"`
	Order    string `json:"order,optional"  validate:"oneof='ascending' 'descending' ''"`
	Api      string `json:"api,optional"`
	Describe string `json:"describe,optional"`
	Group    string `json:"group,optional"`
	Method   string `json:"method,optional" validate:"oneof='GET' 'PUT' 'DELETE' 'POST' ''"`
}

type APIPagingResponse struct {
	HttpCommonResponse
	PagingCommonResponse
	List []API `json:"list"`
}

type APIAllResponse struct {
	HttpCommonResponse
	Total int64 `json:"total"`
	List  []API `json:"list"`
}

type Conn struct {
	ID       uint64 `json:"id"`
	ESConn   string `json:"es_conn"`
	Version  int64  `json:"version"`
	User     string `json:"user"`
	PassWord string `json:"passWord"`
	Describe string `json:"describe"`
}

type ESConnDetailRequest struct {
	ID uint64 `path:"id,optional" validate:"required,numeric"`
}

type ESConnDetailResponse struct {
	HttpCommonResponse
	Detail Conn `json:"detail"`
}

type ESConnCreateRequest struct {
	ESConn   string `json:"es_conn,optional" validate:"required,ip_port" commen:"es连接参数不正确"`
	Version  int64  `json:"version,optional" validate:"required,numeric,oneof='7' '6'"`
	User     string `json:"user,optional"`
	PassWord string `json:"passWord,optional"`
	Describe string `json:"describe,optional" validate:"required"`
}

type ESConnUpdateRequest struct {
	ID       uint64 `path:"id,optional" validate:"required,numeric"`
	ESConn   string `json:"es_conn,optional" validate:"required,es_url" commen:"es连接参数不正确"`
	Version  int64  `json:"version,optional" validate:"required,numeric,oneof='7' '6'"`
	User     string `json:"user,optional"`
	PassWord string `json:"passWord,optional"`
	Describe string `json:"describe,optional" validate:"required"`
}

type ESConnDeleteRequest struct {
	ID uint64 `path:"id,optional" validate:"required,numeric"`
}

type ESConnRequest struct {
	PagingCommonRequest
}

type ESConnResponse struct {
	HttpCommonResponse
	PagingCommonResponse
	List []Conn `json:"list"`
}

type ESConnPingRequest struct {
	ID uint64 `path:"id,optional" validate:"required,numeric"`
}

type ESConnPingResponse struct {
	HttpCommonResponse
	Data interface{} `json:"data"`
}

type ConnectManagerDetailRequest struct {
	ID uint64 `path:"id,optional" validate:"required,numeric,gte=1"`
}

type ConnectManagerDetailResponse struct {
	HttpCommonResponse
	Detail ConnectManager `json:"detail"`
}

type ConnectManagerDeleteRequest struct {
	ID uint64 `path:"id,optional" validate:"required,numeric,gte=1"`
}

type ConnectManagerUpdateRequest struct {
	ID        uint64 `path:"id,optional" validate:"required,numeric,gte=1"`
	Type      string `json:"type,optional" validate:"required"`
	Env       string `json:"env,optional" validate:"required"`
	Host      string `json:"host,optional" validate:"required,ip_port"`
	AccessKey string `json:"accessKey,optional" validate:"required"`
	SecretKey string `json:"secretKey,optional" validate:"required"`
}

type ConnectManagerCreateRequest struct {
	Type      string `json:"type,optional" validate:"required"`
	Env       string `json:"env,optional" validate:"required"`
	Host      string `json:"host,optional" validate:"required,ip_port"`
	AccessKey string `json:"accessKey,optional" validate:"required"`
	SecretKey string `json:"secretKey,optional" validate:"required"`
}

type ConnectManagerPagingRequest struct {
	PagingCommonRequest
	Order string `json:"order,optional"  validate:"oneof='ascending' 'descending' ''"`
}

type ConnectManagerPagingResponse struct {
	HttpCommonResponse
	PagingCommonResponse
	List []ConnectManager `json:"list"`
}

type ConnectManager struct {
	ID        uint64 `json:"id"`
	Type      string `json:"type"`
	Env       string `json:"env"`
	Host      string `json:"host"`
	AccessKey string `json:"accessKey"`
	SecretKey string `json:"secretKey"`
}

type EnvSelectResponseResponse struct {
	HttpCommonResponse
	List []Options `json:"list"`
}

type Options struct {
	Value    string    `json:"value"`
	Label    string    `json:"label"`
	Children []Options `json:"children"`
}

type FileListRequest struct {
	Host   string `json:"host,optional" validate:"required,ip_port"`
	Bucket string `json:"bucket"`
	Path   string `json:"path,optional"`
}

type FileListResponse struct {
	HttpCommonResponse
	List []Files `json:"list"`
}

type Files struct {
	Name         string `json:"name"`
	LastModified int64  `json:"lastModified"`
	Size         int64  `json:"size"`
	IsFile       bool   `json:"isFile"`
}

type AlertRule struct {
	Id         uint64           `json:"id"`
	Ttype      string           `json:"ttype"`
	Name       string           `json:"name"`
	Group      string           `json:"group"`
	To         int              `json:"to"`
	Expr       string           `json:"expr"`
	For        string           `json:"for"`
	AlertText  string           `json:"alertText"`
	CreatedAt  uint64           `json:"createdAt"`
	ModifiedAt uint64           `json:"modifiedAt"`
	DeletedAt  uint64           `json:"deletedAt"`
	Labels     []AlertRuleLabel `json:"labels"`
	Tags       []AlertRuleTag   `json:"tags"`
	Querys     []AlertRuleQuery `json:"querys"`
}

type AlertRuleLabel struct {
	Id          uint64 `json:"id"`
	AlertRuleId uint64 `json:"alertRuleId"`
	Key         string `json:"key"`
	Value       string `json:"value"`
}

type AlertRuleTag struct {
	Id          uint64 `json:"id"`
	AlertRuleId uint64 `json:"alertRuleId"`
	Key         string `json:"key"`
	Value       string `json:"value"`
}

type AlertRuleQuery struct {
	Id          uint64 `json:"id"`
	AlertRuleId uint64 `json:"alertRuleId"`
	Query       string `json:"query"`
}

type AlertRulePagingRequest struct {
	PagingCommonRequest
}

type AlertRuleResponse struct {
	HttpCommonResponse
	PagingCommonResponse
	List []AlertRule `json:"list"`
}

type Host struct {
	Id         uint64    `json:"id" gorm:"clumn:id;primarykey"`
	Host       string    `json:"host" gorm:"clumn:host;type:varchar(50);not null;default:''"`
	To         int       `json:"to" gorm:"clumn:to;type:tinyint;not null"`
	CreatedAt  string    `json:"createdAt" gorm:"clumn:create_at;autoCreateTime;not null"`
	ModifiedAt string    `json:"modifiedAt" gorm:"clumn:modifie_at;autoUpdateTime;not null"`
	DeletedAt  string    `json:"deletedAt" gorm:"clumn:delete_at;index"`
	Tags       []HostTag `json:"tags" gorm:"foreignKey:host_id"`
	Sliences []SlienceName `json:"sliences" gorm:"foreigKey:host_id"`
}

type HostTag struct {
	Id     uint64 `json:"id" gorm:"clumn:id;primaryKey;type:bigint AUTO_INCREMENT"`
	HostId uint64 `json:"hostId" gorm:"clumn:host_id"`
	Key    string `json:"key" gorm:"clumn:key;type:varchar(50);default:'';not null"`
	Value  string `json:"value" gorm:"clumn:value;type:varchar(50);default:'';not null"`
}

type SlienceJoinRest struct {
	Id          uint64 `json:"id" gorm:"clumn:id;primaryKey;type:bigint AUTO_INCREMENT"`
	Host        string `json:"host" gorm:"clumn:host"`
	SlienceName string `json:"slience_name" gorm:"clumn:slience_name"`
	To          int    `json:"to" gorm:"to"`
	Name        string `json:"name" gorm:"clumn:name"`
	Value       string `json:"value" gorm:"clumn:value"`
	IsRegex     bool   `json:"isRegex" gorm:"clumn:is_regex"`
	IsEqual     bool   `json:"isEqual" gorm:"clumn:is_equal"`
	Default     bool   `json:"default" gorm:"clumn:default"`
}

type SlienceName struct {
	Id          uint64           `json:"id,optional" gorm:"clumn:id;primaryKey"`
	HostID      uint64           `json:"host_id" gorm:"clumn:host_id;type:bigint"`
	SlienceName string           `json:"slience_name" gorm:"clumn:slience_name"`
	Default     bool             `json:"default" gorm:"clumn:default"`
	To          int              `json:"to" gorm:"clumn:to"`
	Matchers    []SlienceMatcher `json:"matchers" gorm:"foreignKey:slience_name_id"`
}

type SlienceMatcher struct {
	Id            uint64 `json:"id,optional" gorm:"clumn:id;primaryKey"`
	HostID        uint64 `json:"host_id" gorm:"clumn:host_id;type:bigint"`
	SlienceNameID uint64 `json:"slience_name_id" gorm:"clumn:slience_name_id"`
	Name          string `json:"name" gorm:"clumn:name"`
	Value         string `json:"value" gorm:"clumn:value"`
	IsRegex       bool   `json:"is_regex" gorm:"clumn:is_regex"`
	IsEqual       bool   `json:"is_equal" gorm:"clumn:is_equal"`
}

type Matchers struct {
	Name    string `json:"name"`
	Value   string `json:"value"`
	IsRegex bool   `json:"isRegex"`
	IsEqual bool   `json:"isEqual"`
}

type SliencePutRequest struct {
	Host     string        `path:"host,optional" validate:"required,ipv4"`
	ID       int           `json:"id,optional" validate:"required,numeric,gte=1"`
	Sliences []SlienceName `json:"sliences"`
}

type SlienceRequest struct {
	Host string `path:"host,optional" validate:"required,ipv4"`
}

type SlienceResponse struct {
	HttpCommonResponse
	HostSliences HostSliences `json:"hostSliences"`
}

type HostSliences struct {
	ID       uint64        `json:"id"`
	Host     string        `json:"host"`
	Sliences []SlienceName `json:"sliences"`
}

type HostPagingRequest struct {
	PagingCommonRequest
}

type HostResponse struct {
	HttpCommonResponse
	PagingCommonResponse
	List []Host `json:"list"`
}

type AlarmRequest struct {
	Receiver          string            `json:"receiver"`
	Status            string            `json:"status"`
	Alerts            []Alerts          `json:"alerts"`
	GroupLabels       GroupLabels       `json:"groupLabels"`
	CommonLabels      CommonLabels      `json:"commonLabels"`
	CommonAnnotations CommonAnnotations `json:"commonAnnotations"`
	ExternalURL       string            `json:"externalURL"`
	Version           string            `json:"version"`
	GroupKey          string            `json:"groupKey"`
	TruncatedAlerts   int               `json:"truncatedAlerts"`
}

type Annotations struct {
	Summary  string `json:"summary"`
	Describe string `json:"describe"`
}

type Alerts struct {
	Status       string            `json:"status"`
	Labels       map[string]string `json:"labels"`
	Annotations  Annotations       `json:"annotations"`
	StartsAt     string            `json:"startsAt"`
	EndsAt       string            `json:"endsAt"`
	GeneratorURL string            `json:"generatorURL"`
	Fingerprint  string            `json:"fingerprint"`
}

type GroupLabels struct {
	Alertname string `json:"alertname"`
	Instance  string `json:"instance"`
	Job       string `json:"job"`
	Severity  string `json:"severity"`
}

type CommonLabels struct {
	Alertname string `json:"alertname"`
	Instance  string `json:"instance"`
	Job       string `json:"job"`
	Severity  string `json:"severity"`
}

type CommonAnnotations struct {
	Summary string `json:"summary"`
}
