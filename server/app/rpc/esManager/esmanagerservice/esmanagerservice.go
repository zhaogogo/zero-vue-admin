// Code generated by goctl. DO NOT EDIT!
// Source: esManager.proto

package esmanagerservice

import (
	"context"

	"github.com/zhaoqiang0201/zero-vue-admin/server/app/rpc/esManager/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateESConnRequest = pb.CreateESConnRequest
	ESConn              = pb.ESConn
	ESConnID            = pb.ESConnID
	ESConnPagingRequest = pb.ESConnPagingRequest
	ESConnResponse      = pb.ESConnResponse
	Empty               = pb.Empty
	PingRequest         = pb.PingRequest
	PingResponse        = pb.PingResponse
	Total               = pb.Total
	UpdateESConnRequest = pb.UpdateESConnRequest

	EsManagerService interface {
		ESConnPaging(ctx context.Context, in *ESConnPagingRequest, opts ...grpc.CallOption) (*ESConnResponse, error)
		ESConnTotal(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Total, error)
		Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
		ESConnDetail(ctx context.Context, in *ESConnID, opts ...grpc.CallOption) (*ESConn, error)
		ESConnAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ESConnResponse, error)
		CreateESConn(ctx context.Context, in *CreateESConnRequest, opts ...grpc.CallOption) (*Empty, error)
		UpdateESConn(ctx context.Context, in *UpdateESConnRequest, opts ...grpc.CallOption) (*Empty, error)
		DeleteESConn(ctx context.Context, in *ESConnID, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultEsManagerService struct {
		cli zrpc.Client
	}
)

func NewEsManagerService(cli zrpc.Client) EsManagerService {
	return &defaultEsManagerService{
		cli: cli,
	}
}

func (m *defaultEsManagerService) ESConnPaging(ctx context.Context, in *ESConnPagingRequest, opts ...grpc.CallOption) (*ESConnResponse, error) {
	client := pb.NewEsManagerServiceClient(m.cli.Conn())
	return client.ESConnPaging(ctx, in, opts...)
}

func (m *defaultEsManagerService) ESConnTotal(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Total, error) {
	client := pb.NewEsManagerServiceClient(m.cli.Conn())
	return client.ESConnTotal(ctx, in, opts...)
}

func (m *defaultEsManagerService) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	client := pb.NewEsManagerServiceClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultEsManagerService) ESConnDetail(ctx context.Context, in *ESConnID, opts ...grpc.CallOption) (*ESConn, error) {
	client := pb.NewEsManagerServiceClient(m.cli.Conn())
	return client.ESConnDetail(ctx, in, opts...)
}

func (m *defaultEsManagerService) ESConnAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ESConnResponse, error) {
	client := pb.NewEsManagerServiceClient(m.cli.Conn())
	return client.ESConnAll(ctx, in, opts...)
}

func (m *defaultEsManagerService) CreateESConn(ctx context.Context, in *CreateESConnRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewEsManagerServiceClient(m.cli.Conn())
	return client.CreateESConn(ctx, in, opts...)
}

func (m *defaultEsManagerService) UpdateESConn(ctx context.Context, in *UpdateESConnRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewEsManagerServiceClient(m.cli.Conn())
	return client.UpdateESConn(ctx, in, opts...)
}

func (m *defaultEsManagerService) DeleteESConn(ctx context.Context, in *ESConnID, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewEsManagerServiceClient(m.cli.Conn())
	return client.DeleteESConn(ctx, in, opts...)
}
