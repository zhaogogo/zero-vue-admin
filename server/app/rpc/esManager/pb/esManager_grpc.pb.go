// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: doc/esManager.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EsManagerServiceClient is the client API for EsManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EsManagerServiceClient interface {
	ESConnPaging(ctx context.Context, in *ESConnPagingRequest, opts ...grpc.CallOption) (*ESConnResponse, error)
	ESConnTotal(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Total, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	ESConnDetail(ctx context.Context, in *ESConnID, opts ...grpc.CallOption) (*ESConn, error)
	CreateESConn(ctx context.Context, in *CreateESConnRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateESConn(ctx context.Context, in *UpdateESConnRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteESConn(ctx context.Context, in *ESConnID, opts ...grpc.CallOption) (*Empty, error)
}

type esManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEsManagerServiceClient(cc grpc.ClientConnInterface) EsManagerServiceClient {
	return &esManagerServiceClient{cc}
}

func (c *esManagerServiceClient) ESConnPaging(ctx context.Context, in *ESConnPagingRequest, opts ...grpc.CallOption) (*ESConnResponse, error) {
	out := new(ESConnResponse)
	err := c.cc.Invoke(ctx, "/espb.EsManagerService/ESConnPaging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esManagerServiceClient) ESConnTotal(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Total, error) {
	out := new(Total)
	err := c.cc.Invoke(ctx, "/espb.EsManagerService/ESConnTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esManagerServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/espb.EsManagerService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esManagerServiceClient) ESConnDetail(ctx context.Context, in *ESConnID, opts ...grpc.CallOption) (*ESConn, error) {
	out := new(ESConn)
	err := c.cc.Invoke(ctx, "/espb.EsManagerService/ESConnDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esManagerServiceClient) CreateESConn(ctx context.Context, in *CreateESConnRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/espb.EsManagerService/CreateESConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esManagerServiceClient) UpdateESConn(ctx context.Context, in *UpdateESConnRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/espb.EsManagerService/UpdateESConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esManagerServiceClient) DeleteESConn(ctx context.Context, in *ESConnID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/espb.EsManagerService/DeleteESConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EsManagerServiceServer is the server API for EsManagerService service.
// All implementations must embed UnimplementedEsManagerServiceServer
// for forward compatibility
type EsManagerServiceServer interface {
	ESConnPaging(context.Context, *ESConnPagingRequest) (*ESConnResponse, error)
	ESConnTotal(context.Context, *Empty) (*Total, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	ESConnDetail(context.Context, *ESConnID) (*ESConn, error)
	CreateESConn(context.Context, *CreateESConnRequest) (*Empty, error)
	UpdateESConn(context.Context, *UpdateESConnRequest) (*Empty, error)
	DeleteESConn(context.Context, *ESConnID) (*Empty, error)
	mustEmbedUnimplementedEsManagerServiceServer()
}

// UnimplementedEsManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEsManagerServiceServer struct {
}

func (UnimplementedEsManagerServiceServer) ESConnPaging(context.Context, *ESConnPagingRequest) (*ESConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ESConnPaging not implemented")
}
func (UnimplementedEsManagerServiceServer) ESConnTotal(context.Context, *Empty) (*Total, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ESConnTotal not implemented")
}
func (UnimplementedEsManagerServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedEsManagerServiceServer) ESConnDetail(context.Context, *ESConnID) (*ESConn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ESConnDetail not implemented")
}
func (UnimplementedEsManagerServiceServer) CreateESConn(context.Context, *CreateESConnRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateESConn not implemented")
}
func (UnimplementedEsManagerServiceServer) UpdateESConn(context.Context, *UpdateESConnRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateESConn not implemented")
}
func (UnimplementedEsManagerServiceServer) DeleteESConn(context.Context, *ESConnID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteESConn not implemented")
}
func (UnimplementedEsManagerServiceServer) mustEmbedUnimplementedEsManagerServiceServer() {}

// UnsafeEsManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EsManagerServiceServer will
// result in compilation errors.
type UnsafeEsManagerServiceServer interface {
	mustEmbedUnimplementedEsManagerServiceServer()
}

func RegisterEsManagerServiceServer(s grpc.ServiceRegistrar, srv EsManagerServiceServer) {
	s.RegisterService(&EsManagerService_ServiceDesc, srv)
}

func _EsManagerService_ESConnPaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ESConnPagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsManagerServiceServer).ESConnPaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/espb.EsManagerService/ESConnPaging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsManagerServiceServer).ESConnPaging(ctx, req.(*ESConnPagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsManagerService_ESConnTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsManagerServiceServer).ESConnTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/espb.EsManagerService/ESConnTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsManagerServiceServer).ESConnTotal(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsManagerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsManagerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/espb.EsManagerService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsManagerServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsManagerService_ESConnDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ESConnID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsManagerServiceServer).ESConnDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/espb.EsManagerService/ESConnDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsManagerServiceServer).ESConnDetail(ctx, req.(*ESConnID))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsManagerService_CreateESConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateESConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsManagerServiceServer).CreateESConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/espb.EsManagerService/CreateESConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsManagerServiceServer).CreateESConn(ctx, req.(*CreateESConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsManagerService_UpdateESConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateESConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsManagerServiceServer).UpdateESConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/espb.EsManagerService/UpdateESConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsManagerServiceServer).UpdateESConn(ctx, req.(*UpdateESConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EsManagerService_DeleteESConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ESConnID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsManagerServiceServer).DeleteESConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/espb.EsManagerService/DeleteESConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsManagerServiceServer).DeleteESConn(ctx, req.(*ESConnID))
	}
	return interceptor(ctx, in, info, handler)
}

// EsManagerService_ServiceDesc is the grpc.ServiceDesc for EsManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EsManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "espb.EsManagerService",
	HandlerType: (*EsManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ESConnPaging",
			Handler:    _EsManagerService_ESConnPaging_Handler,
		},
		{
			MethodName: "ESConnTotal",
			Handler:    _EsManagerService_ESConnTotal_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _EsManagerService_Ping_Handler,
		},
		{
			MethodName: "ESConnDetail",
			Handler:    _EsManagerService_ESConnDetail_Handler,
		},
		{
			MethodName: "CreateESConn",
			Handler:    _EsManagerService_CreateESConn_Handler,
		},
		{
			MethodName: "UpdateESConn",
			Handler:    _EsManagerService_UpdateESConn_Handler,
		},
		{
			MethodName: "DeleteESConn",
			Handler:    _EsManagerService_DeleteESConn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doc/esManager.proto",
}
