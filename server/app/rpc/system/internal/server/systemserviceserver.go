// Code generated by goctl. DO NOT EDIT!
// Source: systemAdmin.proto

package server

import (
	"context"

	"github.com/zhaoqiang0201/zero-vue-admin/server/app/rpc/system/internal/logic"
	"github.com/zhaoqiang0201/zero-vue-admin/server/app/rpc/system/internal/svc"
	"github.com/zhaoqiang0201/zero-vue-admin/server/app/rpc/system/pb"
)

type SystemServiceServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedSystemServiceServer
}

func NewSystemServiceServer(svcCtx *svc.ServiceContext) *SystemServiceServer {
	return &SystemServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *SystemServiceServer) Login(ctx context.Context, in *pb.LoginRequest) (*pb.LoginResponse, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *SystemServiceServer) UserDetail(ctx context.Context, in *pb.UserID) (*pb.User, error) {
	l := logic.NewUserDetailLogic(ctx, s.svcCtx)
	return l.UserDetail(in)
}

func (s *SystemServiceServer) UserDetailByName(ctx context.Context, in *pb.UserName) (*pb.User, error) {
	l := logic.NewUserDetailByNameLogic(ctx, s.svcCtx)
	return l.UserDetailByName(in)
}

func (s *SystemServiceServer) UserPaging(ctx context.Context, in *pb.UserPagingRequest) (*pb.UserPagingResponse, error) {
	l := logic.NewUserPagingLogic(ctx, s.svcCtx)
	return l.UserPaging(in)
}

func (s *SystemServiceServer) UserTotal(ctx context.Context, in *pb.Empty) (*pb.Total, error) {
	l := logic.NewUserTotalLogic(ctx, s.svcCtx)
	return l.UserTotal(in)
}

func (s *SystemServiceServer) CreateUser_UserRole(ctx context.Context, in *pb.CreateUser_UserRoleRequest) (*pb.Empty, error) {
	l := logic.NewCreateUserUserRoleLogic(ctx, s.svcCtx)
	return l.CreateUser_UserRole(in)
}

func (s *SystemServiceServer) DeleteSoftUser(ctx context.Context, in *pb.UserDeleteSoftRequest) (*pb.Empty, error) {
	l := logic.NewDeleteSoftUserLogic(ctx, s.svcCtx)
	return l.DeleteSoftUser(in)
}

func (s *SystemServiceServer) DeleteUser(ctx context.Context, in *pb.UserID) (*pb.Empty, error) {
	l := logic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}

func (s *SystemServiceServer) UpdateUserPassword(ctx context.Context, in *pb.UpdateUserPasswordRequest) (*pb.Empty, error) {
	l := logic.NewUpdateUserPasswordLogic(ctx, s.svcCtx)
	return l.UpdateUserPassword(in)
}

func (s *SystemServiceServer) UpdateUser(ctx context.Context, in *pb.UpdateUserRequest) (*pb.Empty, error) {
	l := logic.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

func (s *SystemServiceServer) UserPageSet(ctx context.Context, in *pb.UserID) (*pb.UserPageSetResponse, error) {
	l := logic.NewUserPageSetLogic(ctx, s.svcCtx)
	return l.UserPageSet(in)
}

func (s *SystemServiceServer) UpdateUserPageSet(ctx context.Context, in *pb.UpdateUserPageSetRequest) (*pb.Empty, error) {
	l := logic.NewUpdateUserPageSetLogic(ctx, s.svcCtx)
	return l.UpdateUserPageSet(in)
}

func (s *SystemServiceServer) UserMenuParams(ctx context.Context, in *pb.UserID) (*pb.UserMenuParamsResponse, error) {
	l := logic.NewUserMenuParamsLogic(ctx, s.svcCtx)
	return l.UserMenuParams(in)
}

func (s *SystemServiceServer) UserAllMenuParams(ctx context.Context, in *pb.Empty) (*pb.UserMenuParamsResponse, error) {
	l := logic.NewUserAllMenuParamsLogic(ctx, s.svcCtx)
	return l.UserAllMenuParams(in)
}

func (s *SystemServiceServer) UserRoleByUserID(ctx context.Context, in *pb.UserID) (*pb.UserRoleResponse, error) {
	l := logic.NewUserRoleByUserIDLogic(ctx, s.svcCtx)
	return l.UserRoleByUserID(in)
}

func (s *SystemServiceServer) UpdateUserRole(ctx context.Context, in *pb.UpdateUserRoleRequest) (*pb.Empty, error) {
	l := logic.NewUpdateUserRoleLogic(ctx, s.svcCtx)
	return l.UpdateUserRole(in)
}

func (s *SystemServiceServer) RoleDetail(ctx context.Context, in *pb.RoleID) (*pb.Role, error) {
	l := logic.NewRoleDetailLogic(ctx, s.svcCtx)
	return l.RoleDetail(in)
}

func (s *SystemServiceServer) RoleAll(ctx context.Context, in *pb.Empty) (*pb.RoleAllResponse, error) {
	l := logic.NewRoleAllLogic(ctx, s.svcCtx)
	return l.RoleAll(in)
}

func (s *SystemServiceServer) MenuDetail(ctx context.Context, in *pb.MenuID) (*pb.Menu, error) {
	l := logic.NewMenuDetailLogic(ctx, s.svcCtx)
	return l.MenuDetail(in)
}

func (s *SystemServiceServer) MenuAll(ctx context.Context, in *pb.Empty) (*pb.MenuAllResponse, error) {
	l := logic.NewMenuAllLogic(ctx, s.svcCtx)
	return l.MenuAll(in)
}

func (s *SystemServiceServer) CreateMenu(ctx context.Context, in *pb.CreateMenuRequest) (*pb.Empty, error) {
	l := logic.NewCreateMenuLogic(ctx, s.svcCtx)
	return l.CreateMenu(in)
}

func (s *SystemServiceServer) UpdateMenu(ctx context.Context, in *pb.UpdateMenuRequest) (*pb.Empty, error) {
	l := logic.NewUpdateMenuLogic(ctx, s.svcCtx)
	return l.UpdateMenu(in)
}

func (s *SystemServiceServer) RoleMenuByRoleID(ctx context.Context, in *pb.RoleID) (*pb.RoleMenuResponse, error) {
	l := logic.NewRoleMenuByRoleIDLogic(ctx, s.svcCtx)
	return l.RoleMenuByRoleID(in)
}

func (s *SystemServiceServer) Test(ctx context.Context, in *pb.Empty) (*pb.Total, error) {
	l := logic.NewTestLogic(ctx, s.svcCtx)
	return l.Test(in)
}
