// Code generated by goctl. DO NOT EDIT!
// Source: systemAdmin.proto

package systemservice

import (
	"context"

	"github.com/zhaoqiang0201/zero-vue-admin/server/app/rpc/system/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateMenuRequest          = pb.CreateMenuRequest
	CreateUser_UserRoleRequest = pb.CreateUser_UserRoleRequest
	Empty                      = pb.Empty
	LoginRequest               = pb.LoginRequest
	LoginResponse              = pb.LoginResponse
	Menu                       = pb.Menu
	MenuAllResponse            = pb.MenuAllResponse
	MenuID                     = pb.MenuID
	Role                       = pb.Role
	RoleAllResponse            = pb.RoleAllResponse
	RoleID                     = pb.RoleID
	RoleMenu                   = pb.RoleMenu
	RoleMenuResponse           = pb.RoleMenuResponse
	Total                      = pb.Total
	UpdateMenuRequest          = pb.UpdateMenuRequest
	UpdateUserPageSetRequest   = pb.UpdateUserPageSetRequest
	UpdateUserPasswordRequest  = pb.UpdateUserPasswordRequest
	UpdateUserRequest          = pb.UpdateUserRequest
	UpdateUserRoleRequest      = pb.UpdateUserRoleRequest
	User                       = pb.User
	UserDeleteSoftRequest      = pb.UserDeleteSoftRequest
	UserID                     = pb.UserID
	UserMenuParams             = pb.UserMenuParams
	UserMenuParamsResponse     = pb.UserMenuParamsResponse
	UserName                   = pb.UserName
	UserPageSetResponse        = pb.UserPageSetResponse
	UserPagingRequest          = pb.UserPagingRequest
	UserPagingResponse         = pb.UserPagingResponse
	UserRole                   = pb.UserRole
	UserRoleResponse           = pb.UserRoleResponse

	SystemService interface {
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		UserDetail(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error)
		UserDetailByName(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*User, error)
		UserPaging(ctx context.Context, in *UserPagingRequest, opts ...grpc.CallOption) (*UserPagingResponse, error)
		UserTotal(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Total, error)
		CreateUser_UserRole(ctx context.Context, in *CreateUser_UserRoleRequest, opts ...grpc.CallOption) (*Empty, error)
		DeleteSoftUser(ctx context.Context, in *UserDeleteSoftRequest, opts ...grpc.CallOption) (*Empty, error)
		DeleteUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Empty, error)
		UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*Empty, error)
		UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*Empty, error)
		UserPageSet(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserPageSetResponse, error)
		UpdateUserPageSet(ctx context.Context, in *UpdateUserPageSetRequest, opts ...grpc.CallOption) (*Empty, error)
		UserMenuParams(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserMenuParamsResponse, error)
		UserAllMenuParams(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserMenuParamsResponse, error)
		UserRoleByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserRoleResponse, error)
		UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, opts ...grpc.CallOption) (*Empty, error)
		RoleDetail(ctx context.Context, in *RoleID, opts ...grpc.CallOption) (*Role, error)
		RoleAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RoleAllResponse, error)
		MenuDetail(ctx context.Context, in *MenuID, opts ...grpc.CallOption) (*Menu, error)
		MenuAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MenuAllResponse, error)
		CreateMenu(ctx context.Context, in *CreateMenuRequest, opts ...grpc.CallOption) (*Empty, error)
		UpdateMenu(ctx context.Context, in *UpdateMenuRequest, opts ...grpc.CallOption) (*Empty, error)
		RoleMenuByRoleID(ctx context.Context, in *RoleID, opts ...grpc.CallOption) (*RoleMenuResponse, error)
		Test(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Total, error)
	}

	defaultSystemService struct {
		cli zrpc.Client
	}
)

func NewSystemService(cli zrpc.Client) SystemService {
	return &defaultSystemService{
		cli: cli,
	}
}

func (m *defaultSystemService) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultSystemService) UserDetail(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.UserDetail(ctx, in, opts...)
}

func (m *defaultSystemService) UserDetailByName(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*User, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.UserDetailByName(ctx, in, opts...)
}

func (m *defaultSystemService) UserPaging(ctx context.Context, in *UserPagingRequest, opts ...grpc.CallOption) (*UserPagingResponse, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.UserPaging(ctx, in, opts...)
}

func (m *defaultSystemService) UserTotal(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Total, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.UserTotal(ctx, in, opts...)
}

func (m *defaultSystemService) CreateUser_UserRole(ctx context.Context, in *CreateUser_UserRoleRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.CreateUser_UserRole(ctx, in, opts...)
}

func (m *defaultSystemService) DeleteSoftUser(ctx context.Context, in *UserDeleteSoftRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.DeleteSoftUser(ctx, in, opts...)
}

func (m *defaultSystemService) DeleteUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}

func (m *defaultSystemService) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.UpdateUserPassword(ctx, in, opts...)
}

func (m *defaultSystemService) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

func (m *defaultSystemService) UserPageSet(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserPageSetResponse, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.UserPageSet(ctx, in, opts...)
}

func (m *defaultSystemService) UpdateUserPageSet(ctx context.Context, in *UpdateUserPageSetRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.UpdateUserPageSet(ctx, in, opts...)
}

func (m *defaultSystemService) UserMenuParams(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserMenuParamsResponse, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.UserMenuParams(ctx, in, opts...)
}

func (m *defaultSystemService) UserAllMenuParams(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserMenuParamsResponse, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.UserAllMenuParams(ctx, in, opts...)
}

func (m *defaultSystemService) UserRoleByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserRoleResponse, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.UserRoleByUserID(ctx, in, opts...)
}

func (m *defaultSystemService) UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.UpdateUserRole(ctx, in, opts...)
}

func (m *defaultSystemService) RoleDetail(ctx context.Context, in *RoleID, opts ...grpc.CallOption) (*Role, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.RoleDetail(ctx, in, opts...)
}

func (m *defaultSystemService) RoleAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RoleAllResponse, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.RoleAll(ctx, in, opts...)
}

func (m *defaultSystemService) MenuDetail(ctx context.Context, in *MenuID, opts ...grpc.CallOption) (*Menu, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.MenuDetail(ctx, in, opts...)
}

func (m *defaultSystemService) MenuAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MenuAllResponse, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.MenuAll(ctx, in, opts...)
}

func (m *defaultSystemService) CreateMenu(ctx context.Context, in *CreateMenuRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.CreateMenu(ctx, in, opts...)
}

func (m *defaultSystemService) UpdateMenu(ctx context.Context, in *UpdateMenuRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.UpdateMenu(ctx, in, opts...)
}

func (m *defaultSystemService) RoleMenuByRoleID(ctx context.Context, in *RoleID, opts ...grpc.CallOption) (*RoleMenuResponse, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.RoleMenuByRoleID(ctx, in, opts...)
}

func (m *defaultSystemService) Test(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Total, error) {
	client := pb.NewSystemServiceClient(m.cli.Conn())
	return client.Test(ctx, in, opts...)
}
