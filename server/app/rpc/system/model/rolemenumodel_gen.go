// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roleMenuFieldNames          = builder.RawFieldNames(&RoleMenu{})
	roleMenuRows                = strings.Join(roleMenuFieldNames, ",")
	roleMenuRowsExpectAutoSet   = strings.Join(stringx.Remove(roleMenuFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	roleMenuRowsWithPlaceHolder = strings.Join(stringx.Remove(roleMenuFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheChaosSystemRoleMenuIdPrefix = "cache:chaosSystem:roleMenu:id:"
)

type (
	roleMenuModel interface {
		Insert(ctx context.Context, data *RoleMenu) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*RoleMenu, error)
		Update(ctx context.Context, data *RoleMenu) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultRoleMenuModel struct {
		sqlc.CachedConn
		table string
	}

	RoleMenu struct {
		Id     uint64 `db:"id"`
		MenuId uint64 `db:"menu_id"`
		RoleId uint64 `db:"role_id"`
	}
)

func newRoleMenuModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultRoleMenuModel {
	return &defaultRoleMenuModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`role_menu`",
	}
}

func (m *defaultRoleMenuModel) Delete(ctx context.Context, id uint64) error {
	chaosSystemRoleMenuIdKey := fmt.Sprintf("%s%v", cacheChaosSystemRoleMenuIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, chaosSystemRoleMenuIdKey)
	return err
}

func (m *defaultRoleMenuModel) FindOne(ctx context.Context, id uint64) (*RoleMenu, error) {
	chaosSystemRoleMenuIdKey := fmt.Sprintf("%s%v", cacheChaosSystemRoleMenuIdPrefix, id)
	var resp RoleMenu
	err := m.QueryRowCtx(ctx, &resp, chaosSystemRoleMenuIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", roleMenuRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleMenuModel) Insert(ctx context.Context, data *RoleMenu) (sql.Result, error) {
	chaosSystemRoleMenuIdKey := fmt.Sprintf("%s%v", cacheChaosSystemRoleMenuIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, roleMenuRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.MenuId, data.RoleId)
	}, chaosSystemRoleMenuIdKey)
	return ret, err
}

func (m *defaultRoleMenuModel) Update(ctx context.Context, data *RoleMenu) error {
	chaosSystemRoleMenuIdKey := fmt.Sprintf("%s%v", cacheChaosSystemRoleMenuIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, roleMenuRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.MenuId, data.RoleId, data.Id)
	}, chaosSystemRoleMenuIdKey)
	return err
}

func (m *defaultRoleMenuModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheChaosSystemRoleMenuIdPrefix, primary)
}

func (m *defaultRoleMenuModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", roleMenuRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRoleMenuModel) tableName() string {
	return m.table
}
