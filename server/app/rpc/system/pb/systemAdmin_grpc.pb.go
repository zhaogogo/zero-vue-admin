// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: doc/systemAdmin.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SystemServiceClient is the client API for SystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	UserInfo(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error)
	RoleInfo(ctx context.Context, in *RoleID, opts ...grpc.CallOption) (*Role, error)
	MenuInfo(ctx context.Context, in *MenuID, opts ...grpc.CallOption) (*Menu, error)
	UserPageSetInfo(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserPageSet, error)
	AllRoleList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllRoleListResponse, error)
	PagingUserList(ctx context.Context, in *PagingRequest, opts ...grpc.CallOption) (*PagingUserListResponse, error)
	GetUserRoleByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserRoleList, error)
	GetRoleMenuByRoleID(ctx context.Context, in *RoleID, opts ...grpc.CallOption) (*RoleMenuList, error)
	GetUserMenuParams(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserMenuParamsList, error)
}

type systemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemServiceClient(cc grpc.ClientConnInterface) SystemServiceClient {
	return &systemServiceClient{cc}
}

func (c *systemServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/pb.SystemService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) UserInfo(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/pb.SystemService/UserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) RoleInfo(ctx context.Context, in *RoleID, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/pb.SystemService/RoleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) MenuInfo(ctx context.Context, in *MenuID, opts ...grpc.CallOption) (*Menu, error) {
	out := new(Menu)
	err := c.cc.Invoke(ctx, "/pb.SystemService/MenuInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) UserPageSetInfo(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserPageSet, error) {
	out := new(UserPageSet)
	err := c.cc.Invoke(ctx, "/pb.SystemService/UserPageSetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) AllRoleList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllRoleListResponse, error) {
	out := new(AllRoleListResponse)
	err := c.cc.Invoke(ctx, "/pb.SystemService/AllRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) PagingUserList(ctx context.Context, in *PagingRequest, opts ...grpc.CallOption) (*PagingUserListResponse, error) {
	out := new(PagingUserListResponse)
	err := c.cc.Invoke(ctx, "/pb.SystemService/PagingUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetUserRoleByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserRoleList, error) {
	out := new(UserRoleList)
	err := c.cc.Invoke(ctx, "/pb.SystemService/GetUserRoleByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetRoleMenuByRoleID(ctx context.Context, in *RoleID, opts ...grpc.CallOption) (*RoleMenuList, error) {
	out := new(RoleMenuList)
	err := c.cc.Invoke(ctx, "/pb.SystemService/GetRoleMenuByRoleID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemServiceClient) GetUserMenuParams(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserMenuParamsList, error) {
	out := new(UserMenuParamsList)
	err := c.cc.Invoke(ctx, "/pb.SystemService/GetUserMenuParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServiceServer is the server API for SystemService service.
// All implementations must embed UnimplementedSystemServiceServer
// for forward compatibility
type SystemServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	UserInfo(context.Context, *UserID) (*User, error)
	RoleInfo(context.Context, *RoleID) (*Role, error)
	MenuInfo(context.Context, *MenuID) (*Menu, error)
	UserPageSetInfo(context.Context, *UserID) (*UserPageSet, error)
	AllRoleList(context.Context, *Empty) (*AllRoleListResponse, error)
	PagingUserList(context.Context, *PagingRequest) (*PagingUserListResponse, error)
	GetUserRoleByUserID(context.Context, *UserID) (*UserRoleList, error)
	GetRoleMenuByRoleID(context.Context, *RoleID) (*RoleMenuList, error)
	GetUserMenuParams(context.Context, *UserID) (*UserMenuParamsList, error)
	mustEmbedUnimplementedSystemServiceServer()
}

// UnimplementedSystemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSystemServiceServer struct {
}

func (UnimplementedSystemServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSystemServiceServer) UserInfo(context.Context, *UserID) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedSystemServiceServer) RoleInfo(context.Context, *RoleID) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleInfo not implemented")
}
func (UnimplementedSystemServiceServer) MenuInfo(context.Context, *MenuID) (*Menu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuInfo not implemented")
}
func (UnimplementedSystemServiceServer) UserPageSetInfo(context.Context, *UserID) (*UserPageSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPageSetInfo not implemented")
}
func (UnimplementedSystemServiceServer) AllRoleList(context.Context, *Empty) (*AllRoleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllRoleList not implemented")
}
func (UnimplementedSystemServiceServer) PagingUserList(context.Context, *PagingRequest) (*PagingUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagingUserList not implemented")
}
func (UnimplementedSystemServiceServer) GetUserRoleByUserID(context.Context, *UserID) (*UserRoleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoleByUserID not implemented")
}
func (UnimplementedSystemServiceServer) GetRoleMenuByRoleID(context.Context, *RoleID) (*RoleMenuList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleMenuByRoleID not implemented")
}
func (UnimplementedSystemServiceServer) GetUserMenuParams(context.Context, *UserID) (*UserMenuParamsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMenuParams not implemented")
}
func (UnimplementedSystemServiceServer) mustEmbedUnimplementedSystemServiceServer() {}

// UnsafeSystemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemServiceServer will
// result in compilation errors.
type UnsafeSystemServiceServer interface {
	mustEmbedUnimplementedSystemServiceServer()
}

func RegisterSystemServiceServer(s grpc.ServiceRegistrar, srv SystemServiceServer) {
	s.RegisterService(&SystemService_ServiceDesc, srv)
}

func _SystemService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SystemService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SystemService/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).UserInfo(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_RoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).RoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SystemService/RoleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).RoleInfo(ctx, req.(*RoleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_MenuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).MenuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SystemService/MenuInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).MenuInfo(ctx, req.(*MenuID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_UserPageSetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).UserPageSetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SystemService/UserPageSetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).UserPageSetInfo(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_AllRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).AllRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SystemService/AllRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).AllRoleList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_PagingUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).PagingUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SystemService/PagingUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).PagingUserList(ctx, req.(*PagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetUserRoleByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetUserRoleByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SystemService/GetUserRoleByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetUserRoleByUserID(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetRoleMenuByRoleID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetRoleMenuByRoleID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SystemService/GetRoleMenuByRoleID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetRoleMenuByRoleID(ctx, req.(*RoleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemService_GetUserMenuParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServiceServer).GetUserMenuParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SystemService/GetUserMenuParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServiceServer).GetUserMenuParams(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemService_ServiceDesc is the grpc.ServiceDesc for SystemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SystemService",
	HandlerType: (*SystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _SystemService_Login_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _SystemService_UserInfo_Handler,
		},
		{
			MethodName: "RoleInfo",
			Handler:    _SystemService_RoleInfo_Handler,
		},
		{
			MethodName: "MenuInfo",
			Handler:    _SystemService_MenuInfo_Handler,
		},
		{
			MethodName: "UserPageSetInfo",
			Handler:    _SystemService_UserPageSetInfo_Handler,
		},
		{
			MethodName: "AllRoleList",
			Handler:    _SystemService_AllRoleList_Handler,
		},
		{
			MethodName: "PagingUserList",
			Handler:    _SystemService_PagingUserList_Handler,
		},
		{
			MethodName: "GetUserRoleByUserID",
			Handler:    _SystemService_GetUserRoleByUserID_Handler,
		},
		{
			MethodName: "GetRoleMenuByRoleID",
			Handler:    _SystemService_GetRoleMenuByRoleID_Handler,
		},
		{
			MethodName: "GetUserMenuParams",
			Handler:    _SystemService_GetUserMenuParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doc/systemAdmin.proto",
}
