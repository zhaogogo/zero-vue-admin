// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	alertRuleFieldNames          = builder.RawFieldNames(&AlertRule{})
	alertRuleRows                = strings.Join(alertRuleFieldNames, ",")
	alertRuleRowsExpectAutoSet   = strings.Join(stringx.Remove(alertRuleFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	alertRuleRowsWithPlaceHolder = strings.Join(stringx.Remove(alertRuleFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheChaosMonitoringAlertRuleIdPrefix                   = "cache:chaosMonitoring:alertRule:id:"
	cacheChaosMonitoringAlertRuleTagNameOperatorValuePrefix = "cache:chaosMonitoring:alertRule:tag:name:operator:value:"
)

type (
	alertRuleModel interface {
		Insert(ctx context.Context, data *AlertRule) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*AlertRule, error)
		FindOneByTagNameOperatorValue(ctx context.Context, tag string, name string, operator string, value string) (*AlertRule, error)
		Update(ctx context.Context, data *AlertRule) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultAlertRuleModel struct {
		sqlc.CachedConn
		table string
	}

	AlertRule struct {
		Id          uint64 `db:"id"`
		Name        string `db:"name"`
		Type        string `db:"type"`
		Group       string `db:"group"`
		Tag         string `db:"tag"`
		To          int64  `db:"to"`
		Expr        string `db:"expr"`
		Operator    string `db:"operator"`
		Value       string `db:"value"`
		For         string `db:"for"`
		AnnoSummary string `db:"anno_summary"`
		AnnoTag     string `db:"anno_tag"`
		AnnoDesc    string `db:"anno_desc"`
		IsWrite     int64  `db:"is_write"`
	}
)

func newAlertRuleModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAlertRuleModel {
	return &defaultAlertRuleModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`alert_rule`",
	}
}

func (m *defaultAlertRuleModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	chaosMonitoringAlertRuleIdKey := fmt.Sprintf("%s%v", cacheChaosMonitoringAlertRuleIdPrefix, id)
	chaosMonitoringAlertRuleTagNameOperatorValueKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheChaosMonitoringAlertRuleTagNameOperatorValuePrefix, data.Tag, data.Name, data.Operator, data.Value)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, chaosMonitoringAlertRuleIdKey, chaosMonitoringAlertRuleTagNameOperatorValueKey)
	return err
}

func (m *defaultAlertRuleModel) FindOne(ctx context.Context, id uint64) (*AlertRule, error) {
	chaosMonitoringAlertRuleIdKey := fmt.Sprintf("%s%v", cacheChaosMonitoringAlertRuleIdPrefix, id)
	var resp AlertRule
	err := m.QueryRowCtx(ctx, &resp, chaosMonitoringAlertRuleIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", alertRuleRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAlertRuleModel) FindOneByTagNameOperatorValue(ctx context.Context, tag string, name string, operator string, value string) (*AlertRule, error) {
	chaosMonitoringAlertRuleTagNameOperatorValueKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheChaosMonitoringAlertRuleTagNameOperatorValuePrefix, tag, name, operator, value)
	var resp AlertRule
	err := m.QueryRowIndexCtx(ctx, &resp, chaosMonitoringAlertRuleTagNameOperatorValueKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `tag` = ? and `name` = ? and `operator` = ? and `value` = ? limit 1", alertRuleRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, tag, name, operator, value); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAlertRuleModel) Insert(ctx context.Context, data *AlertRule) (sql.Result, error) {
	chaosMonitoringAlertRuleIdKey := fmt.Sprintf("%s%v", cacheChaosMonitoringAlertRuleIdPrefix, data.Id)
	chaosMonitoringAlertRuleTagNameOperatorValueKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheChaosMonitoringAlertRuleTagNameOperatorValuePrefix, data.Tag, data.Name, data.Operator, data.Value)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, alertRuleRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Type, data.Group, data.Tag, data.To, data.Expr, data.Operator, data.Value, data.For, data.AnnoSummary, data.AnnoTag, data.AnnoDesc, data.IsWrite)
	}, chaosMonitoringAlertRuleIdKey, chaosMonitoringAlertRuleTagNameOperatorValueKey)
	return ret, err
}

func (m *defaultAlertRuleModel) Update(ctx context.Context, newData *AlertRule) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	chaosMonitoringAlertRuleIdKey := fmt.Sprintf("%s%v", cacheChaosMonitoringAlertRuleIdPrefix, data.Id)
	chaosMonitoringAlertRuleTagNameOperatorValueKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheChaosMonitoringAlertRuleTagNameOperatorValuePrefix, data.Tag, data.Name, data.Operator, data.Value)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, alertRuleRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.Type, newData.Group, newData.Tag, newData.To, newData.Expr, newData.Operator, newData.Value, newData.For, newData.AnnoSummary, newData.AnnoTag, newData.AnnoDesc, newData.IsWrite, newData.Id)
	}, chaosMonitoringAlertRuleIdKey, chaosMonitoringAlertRuleTagNameOperatorValueKey)
	return err
}

func (m *defaultAlertRuleModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheChaosMonitoringAlertRuleIdPrefix, primary)
}

func (m *defaultAlertRuleModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", alertRuleRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAlertRuleModel) tableName() string {
	return m.table
}
