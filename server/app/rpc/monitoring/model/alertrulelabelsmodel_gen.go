// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	alertRuleLabelsFieldNames          = builder.RawFieldNames(&AlertRuleLabels{})
	alertRuleLabelsRows                = strings.Join(alertRuleLabelsFieldNames, ",")
	alertRuleLabelsRowsExpectAutoSet   = strings.Join(stringx.Remove(alertRuleLabelsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	alertRuleLabelsRowsWithPlaceHolder = strings.Join(stringx.Remove(alertRuleLabelsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheChaosMonitoringAlertRuleLabelsIdPrefix = "cache:chaosMonitoring:alertRuleLabels:id:"
)

type (
	alertRuleLabelsModel interface {
		Insert(ctx context.Context, data *AlertRuleLabels) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*AlertRuleLabels, error)
		Update(ctx context.Context, data *AlertRuleLabels) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultAlertRuleLabelsModel struct {
		sqlc.CachedConn
		table string
	}

	AlertRuleLabels struct {
		Id          uint64 `db:"id"`
		AlertRuleId uint64 `db:"alert_rule_id"`
		Key         string `db:"key"`
		Value       string `db:"value"`
	}
)

func newAlertRuleLabelsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAlertRuleLabelsModel {
	return &defaultAlertRuleLabelsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`alert_rule_labels`",
	}
}

func (m *defaultAlertRuleLabelsModel) Delete(ctx context.Context, id uint64) error {
	chaosMonitoringAlertRuleLabelsIdKey := fmt.Sprintf("%s%v", cacheChaosMonitoringAlertRuleLabelsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, chaosMonitoringAlertRuleLabelsIdKey)
	return err
}

func (m *defaultAlertRuleLabelsModel) FindOne(ctx context.Context, id uint64) (*AlertRuleLabels, error) {
	chaosMonitoringAlertRuleLabelsIdKey := fmt.Sprintf("%s%v", cacheChaosMonitoringAlertRuleLabelsIdPrefix, id)
	var resp AlertRuleLabels
	err := m.QueryRowCtx(ctx, &resp, chaosMonitoringAlertRuleLabelsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", alertRuleLabelsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAlertRuleLabelsModel) Insert(ctx context.Context, data *AlertRuleLabels) (sql.Result, error) {
	chaosMonitoringAlertRuleLabelsIdKey := fmt.Sprintf("%s%v", cacheChaosMonitoringAlertRuleLabelsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, alertRuleLabelsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AlertRuleId, data.Key, data.Value)
	}, chaosMonitoringAlertRuleLabelsIdKey)
	return ret, err
}

func (m *defaultAlertRuleLabelsModel) Update(ctx context.Context, data *AlertRuleLabels) error {
	chaosMonitoringAlertRuleLabelsIdKey := fmt.Sprintf("%s%v", cacheChaosMonitoringAlertRuleLabelsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, alertRuleLabelsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.AlertRuleId, data.Key, data.Value, data.Id)
	}, chaosMonitoringAlertRuleLabelsIdKey)
	return err
}

func (m *defaultAlertRuleLabelsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheChaosMonitoringAlertRuleLabelsIdPrefix, primary)
}

func (m *defaultAlertRuleLabelsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", alertRuleLabelsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAlertRuleLabelsModel) tableName() string {
	return m.table
}
