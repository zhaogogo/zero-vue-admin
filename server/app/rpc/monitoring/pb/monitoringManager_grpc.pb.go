// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: doc/monitoringManager.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MonitoringManagerClient is the client API for MonitoringManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitoringManagerClient interface {
	AlertRulePaging(ctx context.Context, in *AlertRulePagingRequest, opts ...grpc.CallOption) (*AlertRulePagingResponse, error)
}

type monitoringManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoringManagerClient(cc grpc.ClientConnInterface) MonitoringManagerClient {
	return &monitoringManagerClient{cc}
}

func (c *monitoringManagerClient) AlertRulePaging(ctx context.Context, in *AlertRulePagingRequest, opts ...grpc.CallOption) (*AlertRulePagingResponse, error) {
	out := new(AlertRulePagingResponse)
	err := c.cc.Invoke(ctx, "/monitoringpb.MonitoringManager/AlertRulePaging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitoringManagerServer is the server API for MonitoringManager service.
// All implementations must embed UnimplementedMonitoringManagerServer
// for forward compatibility
type MonitoringManagerServer interface {
	AlertRulePaging(context.Context, *AlertRulePagingRequest) (*AlertRulePagingResponse, error)
	mustEmbedUnimplementedMonitoringManagerServer()
}

// UnimplementedMonitoringManagerServer must be embedded to have forward compatible implementations.
type UnimplementedMonitoringManagerServer struct {
}

func (UnimplementedMonitoringManagerServer) AlertRulePaging(context.Context, *AlertRulePagingRequest) (*AlertRulePagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlertRulePaging not implemented")
}
func (UnimplementedMonitoringManagerServer) mustEmbedUnimplementedMonitoringManagerServer() {}

// UnsafeMonitoringManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoringManagerServer will
// result in compilation errors.
type UnsafeMonitoringManagerServer interface {
	mustEmbedUnimplementedMonitoringManagerServer()
}

func RegisterMonitoringManagerServer(s grpc.ServiceRegistrar, srv MonitoringManagerServer) {
	s.RegisterService(&MonitoringManager_ServiceDesc, srv)
}

func _MonitoringManager_AlertRulePaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertRulePagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitoringManagerServer).AlertRulePaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monitoringpb.MonitoringManager/AlertRulePaging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitoringManagerServer).AlertRulePaging(ctx, req.(*AlertRulePagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MonitoringManager_ServiceDesc is the grpc.ServiceDesc for MonitoringManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitoringManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monitoringpb.MonitoringManager",
	HandlerType: (*MonitoringManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AlertRulePaging",
			Handler:    _MonitoringManager_AlertRulePaging_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doc/monitoringManager.proto",
}
