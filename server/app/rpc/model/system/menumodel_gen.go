// Code generated by goctl. DO NOT EDIT!

package system

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	menuFieldNames          = builder.RawFieldNames(&Menu{})
	menuRows                = strings.Join(menuFieldNames, ",")
	menuRowsExpectAutoSet   = strings.Join(stringx.Remove(menuFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	menuRowsWithPlaceHolder = strings.Join(stringx.Remove(menuFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheChaosSystemMenuIdPrefix       = "cache:chaosSystem:menu:id:"
	cacheChaosSystemMenuNamePathPrefix = "cache:chaosSystem:menu:name:path:"
)

type (
	menuModel interface {
		Insert(ctx context.Context, data *Menu) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Menu, error)
		FindOneByNamePath(ctx context.Context, name string, path string) (*Menu, error)
		Update(ctx context.Context, data *Menu) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultMenuModel struct {
		sqlc.CachedConn
		table string
	}

	Menu struct {
		Id         uint64       `db:"id"`
		ParentId   uint64       `db:"parent_id"` // 父菜单ID
		Name       string       `db:"name"`      // 路由name
		Path       string       `db:"path"`      // 路由path
		Component  string       `db:"component"` // 对应前端文件路径
		Title      string       `db:"title"`     // 附加属性
		Icon       string       `db:"icon"`      // 附加属性
		Sort       int64        `db:"sort"`
		Hidden     int64        `db:"hidden"` // 是否隐藏 0 false/1 true
		CreateTime time.Time    `db:"create_time"`
		UpdateTime time.Time    `db:"update_time"`
		DeleteTime sql.NullTime `db:"delete_time"`
	}
)

func newMenuModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultMenuModel {
	return &defaultMenuModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`menu`",
	}
}

func (m *defaultMenuModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	chaosSystemMenuIdKey := fmt.Sprintf("%s%v", cacheChaosSystemMenuIdPrefix, id)
	chaosSystemMenuNamePathKey := fmt.Sprintf("%s%v:%v", cacheChaosSystemMenuNamePathPrefix, data.Name, data.Path)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, chaosSystemMenuIdKey, chaosSystemMenuNamePathKey)
	return err
}

func (m *defaultMenuModel) FindOne(ctx context.Context, id uint64) (*Menu, error) {
	chaosSystemMenuIdKey := fmt.Sprintf("%s%v", cacheChaosSystemMenuIdPrefix, id)
	var resp Menu
	err := m.QueryRowCtx(ctx, &resp, chaosSystemMenuIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", menuRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMenuModel) FindOneByNamePath(ctx context.Context, name string, path string) (*Menu, error) {
	chaosSystemMenuNamePathKey := fmt.Sprintf("%s%v:%v", cacheChaosSystemMenuNamePathPrefix, name, path)
	var resp Menu
	err := m.QueryRowIndexCtx(ctx, &resp, chaosSystemMenuNamePathKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? and `path` = ? limit 1", menuRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name, path); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMenuModel) Insert(ctx context.Context, data *Menu) (sql.Result, error) {
	chaosSystemMenuIdKey := fmt.Sprintf("%s%v", cacheChaosSystemMenuIdPrefix, data.Id)
	chaosSystemMenuNamePathKey := fmt.Sprintf("%s%v:%v", cacheChaosSystemMenuNamePathPrefix, data.Name, data.Path)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, menuRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ParentId, data.Name, data.Path, data.Component, data.Title, data.Icon, data.Sort, data.Hidden, data.DeleteTime)
	}, chaosSystemMenuIdKey, chaosSystemMenuNamePathKey)
	return ret, err
}

func (m *defaultMenuModel) Update(ctx context.Context, newData *Menu) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	chaosSystemMenuIdKey := fmt.Sprintf("%s%v", cacheChaosSystemMenuIdPrefix, data.Id)
	chaosSystemMenuNamePathKey := fmt.Sprintf("%s%v:%v", cacheChaosSystemMenuNamePathPrefix, data.Name, data.Path)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, menuRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ParentId, newData.Name, newData.Path, newData.Component, newData.Title, newData.Icon, newData.Sort, newData.Hidden, newData.DeleteTime, newData.Id)
	}, chaosSystemMenuIdKey, chaosSystemMenuNamePathKey)
	return err
}

func (m *defaultMenuModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheChaosSystemMenuIdPrefix, primary)
}

func (m *defaultMenuModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", menuRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMenuModel) tableName() string {
	return m.table
}
