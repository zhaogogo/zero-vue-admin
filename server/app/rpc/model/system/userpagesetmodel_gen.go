// Code generated by goctl. DO NOT EDIT!

package system

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userPageSetFieldNames          = builder.RawFieldNames(&UserPageSet{})
	userPageSetRows                = strings.Join(userPageSetFieldNames, ",")
	userPageSetRowsExpectAutoSet   = strings.Join(stringx.Remove(userPageSetFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userPageSetRowsWithPlaceHolder = strings.Join(stringx.Remove(userPageSetFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheChaosSystemUserPageSetIdPrefix     = "cache:chaosSystem:userPageSet:id:"
	cacheChaosSystemUserPageSetUserIdPrefix = "cache:chaosSystem:userPageSet:userId:"
)

type (
	userPageSetModel interface {
		Insert(ctx context.Context, data *UserPageSet) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*UserPageSet, error)
		FindOneByUserId(ctx context.Context, userId uint64) (*UserPageSet, error)
		Update(ctx context.Context, data *UserPageSet) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUserPageSetModel struct {
		sqlc.CachedConn
		table string
	}

	UserPageSet struct {
		Id              uint64 `db:"id"`
		UserId          uint64 `db:"user_id"`
		Avatar          string `db:"avatar"`            // 头像
		DefaultRouter   string `db:"default_router"`    // 默认路由
		SideMode        string `db:"side_mode"`         // side颜色
		TextColor       string `db:"text_color"`        // 文本颜色
		ActiveTextColor string `db:"active_text_color"` // 选中路由文本颜色
	}
)

func newUserPageSetModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserPageSetModel {
	return &defaultUserPageSetModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_page_set`",
	}
}

func (m *defaultUserPageSetModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	chaosSystemUserPageSetIdKey := fmt.Sprintf("%s%v", cacheChaosSystemUserPageSetIdPrefix, id)
	chaosSystemUserPageSetUserIdKey := fmt.Sprintf("%s%v", cacheChaosSystemUserPageSetUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, chaosSystemUserPageSetIdKey, chaosSystemUserPageSetUserIdKey)
	return err
}

func (m *defaultUserPageSetModel) FindOne(ctx context.Context, id uint64) (*UserPageSet, error) {
	chaosSystemUserPageSetIdKey := fmt.Sprintf("%s%v", cacheChaosSystemUserPageSetIdPrefix, id)
	var resp UserPageSet
	err := m.QueryRowCtx(ctx, &resp, chaosSystemUserPageSetIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userPageSetRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserPageSetModel) FindOneByUserId(ctx context.Context, userId uint64) (*UserPageSet, error) {
	chaosSystemUserPageSetUserIdKey := fmt.Sprintf("%s%v", cacheChaosSystemUserPageSetUserIdPrefix, userId)
	var resp UserPageSet
	err := m.QueryRowIndexCtx(ctx, &resp, chaosSystemUserPageSetUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", userPageSetRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserPageSetModel) Insert(ctx context.Context, data *UserPageSet) (sql.Result, error) {
	chaosSystemUserPageSetIdKey := fmt.Sprintf("%s%v", cacheChaosSystemUserPageSetIdPrefix, data.Id)
	chaosSystemUserPageSetUserIdKey := fmt.Sprintf("%s%v", cacheChaosSystemUserPageSetUserIdPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, userPageSetRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Avatar, data.DefaultRouter, data.SideMode, data.TextColor, data.ActiveTextColor)
	}, chaosSystemUserPageSetIdKey, chaosSystemUserPageSetUserIdKey)
	return ret, err
}

func (m *defaultUserPageSetModel) Update(ctx context.Context, newData *UserPageSet) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	chaosSystemUserPageSetIdKey := fmt.Sprintf("%s%v", cacheChaosSystemUserPageSetIdPrefix, data.Id)
	chaosSystemUserPageSetUserIdKey := fmt.Sprintf("%s%v", cacheChaosSystemUserPageSetUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userPageSetRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.Avatar, newData.DefaultRouter, newData.SideMode, newData.TextColor, newData.ActiveTextColor, newData.Id)
	}, chaosSystemUserPageSetIdKey, chaosSystemUserPageSetUserIdKey)
	return err
}

func (m *defaultUserPageSetModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheChaosSystemUserPageSetIdPrefix, primary)
}

func (m *defaultUserPageSetModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userPageSetRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserPageSetModel) tableName() string {
	return m.table
}
