// Code generated by goctl. DO NOT EDIT!

package system

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userMenuParamsFieldNames          = builder.RawFieldNames(&UserMenuParams{})
	userMenuParamsRows                = strings.Join(userMenuParamsFieldNames, ",")
	userMenuParamsRowsExpectAutoSet   = strings.Join(stringx.Remove(userMenuParamsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userMenuParamsRowsWithPlaceHolder = strings.Join(stringx.Remove(userMenuParamsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheChaosSystemUserMenuParamsIdPrefix = "cache:chaosSystem:userMenuParams:id:"
)

type (
	userMenuParamsModel interface {
		Insert(ctx context.Context, data *UserMenuParams) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*UserMenuParams, error)
		Update(ctx context.Context, data *UserMenuParams) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUserMenuParamsModel struct {
		sqlc.CachedConn
		table string
	}

	UserMenuParams struct {
		Id     uint64 `db:"id"`
		UserId uint64 `db:"user_id"`
		MenuId uint64 `db:"menu_id"`
		Type   string `db:"type"`
		Key    string `db:"key"`
		Value  string `db:"value"`
	}
)

func newUserMenuParamsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserMenuParamsModel {
	return &defaultUserMenuParamsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_menu_params`",
	}
}

func (m *defaultUserMenuParamsModel) Delete(ctx context.Context, id uint64) error {
	chaosSystemUserMenuParamsIdKey := fmt.Sprintf("%s%v", cacheChaosSystemUserMenuParamsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, chaosSystemUserMenuParamsIdKey)
	return err
}

func (m *defaultUserMenuParamsModel) FindOne(ctx context.Context, id uint64) (*UserMenuParams, error) {
	chaosSystemUserMenuParamsIdKey := fmt.Sprintf("%s%v", cacheChaosSystemUserMenuParamsIdPrefix, id)
	var resp UserMenuParams
	err := m.QueryRowCtx(ctx, &resp, chaosSystemUserMenuParamsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userMenuParamsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserMenuParamsModel) Insert(ctx context.Context, data *UserMenuParams) (sql.Result, error) {
	chaosSystemUserMenuParamsIdKey := fmt.Sprintf("%s%v", cacheChaosSystemUserMenuParamsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, userMenuParamsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.MenuId, data.Type, data.Key, data.Value)
	}, chaosSystemUserMenuParamsIdKey)
	return ret, err
}

func (m *defaultUserMenuParamsModel) Update(ctx context.Context, data *UserMenuParams) error {
	chaosSystemUserMenuParamsIdKey := fmt.Sprintf("%s%v", cacheChaosSystemUserMenuParamsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userMenuParamsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.MenuId, data.Type, data.Key, data.Value, data.Id)
	}, chaosSystemUserMenuParamsIdKey)
	return err
}

func (m *defaultUserMenuParamsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheChaosSystemUserMenuParamsIdPrefix, primary)
}

func (m *defaultUserMenuParamsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userMenuParamsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserMenuParamsModel) tableName() string {
	return m.table
}
